
Introduction to DESeq2
======================

This notebook serves as a tutorial for using the DESeq2 package. Please
be sure to consult the excellent vignette provided by the DESeq2
package. Hopefully, we will also get a chance to review the edgeR
package (which also has a very nice vignette which I suggest that you
review)

Load packages
~~~~~~~~~~~~~

Load requisite R packages

.. code:: python

    library(DESeq2)
    library(tools)
    options(width=100)

Importing and Inspecting Data
-----------------------------

Let's set the file name containing the phenotype data and the directory
storing the count files from the htseq-count step. You will have to
adjust these strings. Note that it is assumed that all count files are
stored under a single directory.

.. code:: python

    phfile="/home/owzar001/CURRENT/summercourse-2015/Data/sampletable.txt"
    cntdir="/home/owzar001/CURRENT/summercourse-2015/Data/COUNTS"

Next, read in the phenotype data from the sample file. It is always a
good idea to display the md5sum hash key for the file. Note that when
importing the file using read.table(), the stringsAsFactor argument is
set to FALSE. This imports strings as character rather than factor
objects.

.. code:: python

    md5sum(phfile)
    phdata=read.table(phfile,sep=",",stringsAsFactor=FALSE)




.. raw:: html

    <strong>/home/owzar001/CURRENT/summercourse-2015/Data/sampletable.txt:</strong> '10cdaaa6e5fc76ab92b6d845d33a2a2f'



It is always a good idea to check the dimension of the file you have
read in

.. code:: python

    dim(phdata)




.. raw:: html

    <ol class=list-inline>
    	<li>6</li>
    	<li>3</li>
    </ol>




Finally, it is a good idea to print out the sample data (or at least the
first few rows)

.. code:: python

    phdata




.. raw:: html

    <table>
    <thead><tr><th></th><th scope=col>V1</th><th scope=col>V2</th><th scope=col>V3</th></tr></thead>
    <tbody>
    	<tr><th scope=row>1</th><td>AGTCAA_counts.tsv</td><td>AGTCAA</td><td>0</td></tr>
    	<tr><th scope=row>2</th><td>AGTTCC_counts.tsv</td><td>AGTTCC</td><td>0</td></tr>
    	<tr><th scope=row>3</th><td>ATGTCA_counts.tsv</td><td>ATGTCA</td><td>0</td></tr>
    	<tr><th scope=row>4</th><td>CCGTCC_counts.tsv</td><td>CCGTCC</td><td>1</td></tr>
    	<tr><th scope=row>5</th><td>GTCCGC_counts.tsv</td><td>GTCCGC</td><td>1</td></tr>
    	<tr><th scope=row>6</th><td>GTGAAA_counts.tsv</td><td>GTGAAA</td><td>1</td></tr>
    </tbody>
    </table>




Next, we reformat the phenotype data object with more informative column
names and by adding the md5sum hash keys for the count files. When
dealing with directory and file names you should use file.path(),
dirname() and basename(). Check out the help files

.. code:: python

    colnames(phdata)=c("filename","sampid","trt")
    phdata[["md5sum"]]=md5sum(file.path(cntdir,phdata[["filename"]]))
    phdata




.. raw:: html

    <table>
    <thead><tr><th></th><th scope=col>filename</th><th scope=col>sampid</th><th scope=col>trt</th><th scope=col>md5sum</th></tr></thead>
    <tbody>
    	<tr><th scope=row>1</th><td>AGTCAA_counts.tsv</td><td>AGTCAA</td><td>0</td><td>a9eaa959aba1b02b3831583c2a9751c8</td></tr>
    	<tr><th scope=row>2</th><td>AGTTCC_counts.tsv</td><td>AGTTCC</td><td>0</td><td>4183767e4eeb75dc582bcf438af13500</td></tr>
    	<tr><th scope=row>3</th><td>ATGTCA_counts.tsv</td><td>ATGTCA</td><td>0</td><td>26fbba06520758e5a3acd9bd432ebed4</td></tr>
    	<tr><th scope=row>4</th><td>CCGTCC_counts.tsv</td><td>CCGTCC</td><td>1</td><td>50036a88fd48645f740a31f4f4352cfb</td></tr>
    	<tr><th scope=row>5</th><td>GTCCGC_counts.tsv</td><td>GTCCGC</td><td>1</td><td>bb1cecd886127159157e9431d072cad5</td></tr>
    	<tr><th scope=row>6</th><td>GTGAAA_counts.tsv</td><td>GTGAAA</td><td>1</td><td>fa544c0a076eedb54937c7189f4e1fbc</td></tr>
    </tbody>
    </table>




The first step to an analysis using the DESeq2 package is to import the
raw counts. If these counts stored in files generated by htseq-count,
then you may use the DESeqDataSetFromHTSeqCount() function from the
package. This function expects a sample table that contains the sample
id in the first column and the count file name in teh second column. Our
sample table is not in that format. It is easy to reorder the columns

.. code:: python

    phdata=phdata[c("sampid","filename","trt","md5sum")]
    phdata




.. raw:: html

    <table>
    <thead><tr><th></th><th scope=col>sampid</th><th scope=col>filename</th><th scope=col>trt</th><th scope=col>md5sum</th></tr></thead>
    <tbody>
    	<tr><th scope=row>1</th><td>AGTCAA</td><td>AGTCAA_counts.tsv</td><td>0</td><td>a9eaa959aba1b02b3831583c2a9751c8</td></tr>
    	<tr><th scope=row>2</th><td>AGTTCC</td><td>AGTTCC_counts.tsv</td><td>0</td><td>4183767e4eeb75dc582bcf438af13500</td></tr>
    	<tr><th scope=row>3</th><td>ATGTCA</td><td>ATGTCA_counts.tsv</td><td>0</td><td>26fbba06520758e5a3acd9bd432ebed4</td></tr>
    	<tr><th scope=row>4</th><td>CCGTCC</td><td>CCGTCC_counts.tsv</td><td>1</td><td>50036a88fd48645f740a31f4f4352cfb</td></tr>
    	<tr><th scope=row>5</th><td>GTCCGC</td><td>GTCCGC_counts.tsv</td><td>1</td><td>bb1cecd886127159157e9431d072cad5</td></tr>
    	<tr><th scope=row>6</th><td>GTGAAA</td><td>GTGAAA_counts.tsv</td><td>1</td><td>fa544c0a076eedb54937c7189f4e1fbc</td></tr>
    </tbody>
    </table>




.. code:: python

    Also, DESeq2 prefers that the treatment variable is of factor class. So we will convert it

.. code:: python

    phdata[["trt"]]=as.factor(phdata[["trt"]])

Now, we import the counts. Note that the first argument is the sample
table while the second is the directory storing the count files. The
last argument specifies the design. More on this later.

.. code:: python

    dds=DESeqDataSetFromHTSeqCount(sampleTable = phdata,directory = cntdir,design=~trt)

Inspect object
~~~~~~~~~~~~~~

Let's has a look at the object we have created.

.. code:: python

    dds




.. parsed-literal::

    class: DESeqDataSet 
    dim: 4436 6 
    exptData(0):
    assays(1): counts
    rownames(4436): GeneID:12930114 GeneID:12930115 ... GeneID:13406005 GeneID:13406006
    rowRanges metadata column names(0):
    colnames(6): AGTCAA AGTTCC ... GTCCGC GTGAAA
    colData names(2): trt md5sum



Note that this object is of class DESeqDataSet. It contains data on 4436
genes on 6 samples. Use the colData() function to see what you have read
in

.. code:: python

    colData(dds)




.. parsed-literal::

    DataFrame with 6 rows and 2 columns
                trt                           md5sum
           <factor>                      <character>
    AGTCAA        0 a9eaa959aba1b02b3831583c2a9751c8
    AGTTCC        0 4183767e4eeb75dc582bcf438af13500
    ATGTCA        0 26fbba06520758e5a3acd9bd432ebed4
    CCGTCC        1 50036a88fd48645f740a31f4f4352cfb
    GTCCGC        1 bb1cecd886127159157e9431d072cad5
    GTGAAA        1 fa544c0a076eedb54937c7189f4e1fbc



The first thing you may want to do is to have a look at the raw counts
you have imported. You can use the counts(). Let's looks the first three
genes (use the head() function to avoid printing out all genes). Before
that notw the dimension of the count matrix (does it look correct?)

.. code:: python

    dim(counts(dds))




.. raw:: html

    <ol class=list-inline>
    	<li>4436</li>
    	<li>6</li>
    </ol>




Now print the raw counts for the first three genes (how can you verify
this looking at the files from htseq-count)

.. code:: python

    head(counts(dds),3)




.. raw:: html

    <table>
    <thead><tr><th></th><th scope=col>AGTCAA</th><th scope=col>AGTTCC</th><th scope=col>ATGTCA</th><th scope=col>CCGTCC</th><th scope=col>GTCCGC</th><th scope=col>GTGAAA</th></tr></thead>
    <tbody>
    	<tr><th scope=row>GeneID:12930114</th><td>118</td><td>137</td><td>149</td><td>120</td><td>161</td><td>174</td></tr>
    	<tr><th scope=row>GeneID:12930115</th><td>30</td><td>42</td><td>25</td><td>18</td><td>32</td><td>34</td></tr>
    	<tr><th scope=row>GeneID:12930116</th><td>15</td><td>55</td><td>37</td><td>49</td><td>36</td><td>27</td></tr>
    </tbody>
    </table>




Slots of an S4 class
~~~~~~~~~~~~~~~~~~~~

To get the slots of an S4 class use slotNames()

.. code:: python

    slotNames(dds)




.. raw:: html

    <ol class=list-inline>
    	<li>'design'</li>
    	<li>'dispersionFunction'</li>
    	<li>'exptData'</li>
    	<li>'rowData'</li>
    	<li>'colData'</li>
    	<li>'assays'</li>
    </ol>




Now let's look at a few slots:

.. code:: python

    This gives the design of the study

.. code:: python

    dds@design




.. parsed-literal::

    ~trt



The dispersion function is NULl for now (more on this later)

.. code:: python

    dds@dispersionFunction




.. raw:: html

    <pre class=language-r><code>function () 
    NULL</code></pre>



This slots return gene specific information (it will be populated later)

.. code:: python

    dds@rowData




.. parsed-literal::

    GRangesList object of length 4436:
    $GeneID:12930114 
    GRanges object with 0 ranges and 0 metadata columns:
       seqnames    ranges strand
          <Rle> <IRanges>  <Rle>
    
    $GeneID:12930115 
    GRanges object with 0 ranges and 0 metadata columns:
         seqnames ranges strand
    
    $GeneID:12930116 
    GRanges object with 0 ranges and 0 metadata columns:
         seqnames ranges strand
    
    ...
    <4433 more elements>
    -------
    seqinfo: no sequences



This slot returns the sample data

.. code:: python

    dds@colData




.. parsed-literal::

    DataFrame with 6 rows and 2 columns
                trt                           md5sum
           <factor>                      <character>
    AGTCAA        0 a9eaa959aba1b02b3831583c2a9751c8
    AGTTCC        0 4183767e4eeb75dc582bcf438af13500
    ATGTCA        0 26fbba06520758e5a3acd9bd432ebed4
    CCGTCC        1 50036a88fd48645f740a31f4f4352cfb
    GTCCGC        1 bb1cecd886127159157e9431d072cad5
    GTGAAA        1 fa544c0a076eedb54937c7189f4e1fbc



Before, going to the next step, let's look at the output from mcols()

.. code:: python

    mcols(dds)




.. parsed-literal::

    DataFrame with 4436 rows and 0 columns



Estimate Size Factors and Dispersion Parameters
-----------------------------------------------

You recall that DESeq requires that we have estimates for sample
specific size factors and gene specific dispersion factors. More
specifically, recall that DESeq models the count :math:`K_{ij}` (gene
:math:`i`, sample :math:`j`) as negative binomial with mean
:math:`\mu_{ij}` and dispersion parameter :math:`\alpha_i`. Here
:math:`\mu_{ij}=s_j q_{ij}` where
:math:`\log_2(q_{ij}) = \beta_{0i} + \beta_{1i} z_j`. Here :math:`s_j`
is the sample :math:`j` specific size factor.

Size Factors
------------

We begin by estimating the size factors :math:`s_1,\ldots,s_6`:

.. code:: python

    dds <- estimateSizeFactors(dds)

Now, compare the dds object to that of before applying the
estimateSizeFactors() function. What has changed? What remains
unchanged?

.. code:: python

    dds




.. parsed-literal::

    class: DESeqDataSet 
    dim: 4436 6 
    exptData(0):
    assays(1): counts
    rownames(4436): GeneID:12930114 GeneID:12930115 ... GeneID:13406005 GeneID:13406006
    rowRanges metadata column names(0):
    colnames(6): AGTCAA AGTTCC ... GTCCGC GTGAAA
    colData names(3): trt md5sum sizeFactor



Note that there is a sizeFactor added to colData. Let's look at it more
carefully

.. code:: python

    colData(dds)




.. parsed-literal::

    DataFrame with 6 rows and 3 columns
                trt                           md5sum sizeFactor
           <factor>                      <character>  <numeric>
    AGTCAA        0 a9eaa959aba1b02b3831583c2a9751c8  0.9398016
    AGTTCC        0 4183767e4eeb75dc582bcf438af13500  1.2343255
    ATGTCA        0 26fbba06520758e5a3acd9bd432ebed4  1.1173600
    CCGTCC        1 50036a88fd48645f740a31f4f4352cfb  0.8807831
    GTCCGC        1 bb1cecd886127159157e9431d072cad5  1.0855625
    GTGAAA        1 fa544c0a076eedb54937c7189f4e1fbc  0.8563576



You can also get the size factors directly (why are there six size
factors?)

.. code:: python

    sizeFactors(dds)




.. raw:: html

    <dl class=dl-horizontal>
    	<dt>AGTCAA</dt>
    		<dd>0.93980157208525</dd>
    	<dt>AGTTCC</dt>
    		<dd>1.23432547052393</dd>
    	<dt>ATGTCA</dt>
    		<dd>1.11735999797428</dd>
    	<dt>CCGTCC</dt>
    		<dd>0.880783106173401</dd>
    	<dt>GTCCGC</dt>
    		<dd>1.08556249958198</dd>
    	<dt>GTGAAA</dt>
    		<dd>0.856357620661721</dd>
    </dl>




It is preferable to limit the number of decimal places. Next show the
size factors rounded to 3 decimal places

.. code:: python

    round(sizeFactors(dds),3)




.. raw:: html

    <dl class=dl-horizontal>
    	<dt>AGTCAA</dt>
    		<dd>0.94</dd>
    	<dt>AGTTCC</dt>
    		<dd>1.234</dd>
    	<dt>ATGTCA</dt>
    		<dd>1.117</dd>
    	<dt>CCGTCC</dt>
    		<dd>0.881</dd>
    	<dt>GTCCGC</dt>
    		<dd>1.086</dd>
    	<dt>GTGAAA</dt>
    		<dd>0.856</dd>
    </dl>




Now that the size factors have been estimated, we can get "normalized"
counts

.. code:: python

    head(counts(dds),3)
    head(counts(dds,normalize=TRUE),3)




.. raw:: html

    <table>
    <thead><tr><th></th><th scope=col>AGTCAA</th><th scope=col>AGTTCC</th><th scope=col>ATGTCA</th><th scope=col>CCGTCC</th><th scope=col>GTCCGC</th><th scope=col>GTGAAA</th></tr></thead>
    <tbody>
    	<tr><th scope=row>GeneID:12930114</th><td>118</td><td>137</td><td>149</td><td>120</td><td>161</td><td>174</td></tr>
    	<tr><th scope=row>GeneID:12930115</th><td>30</td><td>42</td><td>25</td><td>18</td><td>32</td><td>34</td></tr>
    	<tr><th scope=row>GeneID:12930116</th><td>15</td><td>55</td><td>37</td><td>49</td><td>36</td><td>27</td></tr>
    </tbody>
    </table>






.. raw:: html

    <table>
    <thead><tr><th></th><th scope=col>AGTCAA</th><th scope=col>AGTTCC</th><th scope=col>ATGTCA</th><th scope=col>CCGTCC</th><th scope=col>GTCCGC</th><th scope=col>GTGAAA</th></tr></thead>
    <tbody>
    	<tr><th scope=row>GeneID:12930114</th><td>125.5584</td><td>110.9918</td><td>133.3500</td><td>136.2424</td><td>148.3102</td><td>203.1861</td></tr>
    	<tr><th scope=row>GeneID:12930115</th><td>31.92163</td><td>34.02668</td><td>22.37417</td><td>20.43636</td><td>29.47781</td><td>39.70304</td></tr>
    	<tr><th scope=row>GeneID:12930116</th><td>15.96082</td><td>44.55875</td><td>33.11377</td><td>55.63231</td><td>33.16253</td><td>31.52888</td></tr>
    </tbody>
    </table>




Note that these are the counts divided by the size factors. Compare the
first row of the last table ("normalized" counts for gene 1) to the hand
calculation below.

.. code:: python

    counts(dds)[1,]/sizeFactors(dds)




.. raw:: html

    <dl class=dl-horizontal>
    	<dt>AGTCAA</dt>
    		<dd>125.558419463142</dd>
    	<dt>AGTTCC</dt>
    		<dd>110.991795334053</dd>
    	<dt>ATGTCA</dt>
    		<dd>133.350039620292</dd>
    	<dt>CCGTCC</dt>
    		<dd>136.242395158264</dd>
    	<dt>GTCCGC</dt>
    		<dd>148.310207898667</dd>
    	<dt>GTGAAA</dt>
    		<dd>203.186140698494</dd>
    </dl>




Exercise: How do you get the raw counts for gene "GeneID:12930116"?

.. code:: python

    counts(dds)["GeneID:12930116",]




.. raw:: html

    <dl class=dl-horizontal>
    	<dt>AGTCAA</dt>
    		<dd>15</dd>
    	<dt>AGTTCC</dt>
    		<dd>55</dd>
    	<dt>ATGTCA</dt>
    		<dd>37</dd>
    	<dt>CCGTCC</dt>
    		<dd>49</dd>
    	<dt>GTCCGC</dt>
    		<dd>36</dd>
    	<dt>GTGAAA</dt>
    		<dd>27</dd>
    </dl>




Exercise: How do you get the normalized counts for gene
"GeneID:12930116"?

.. code:: python

    counts(dds,normalize=TRUE)["GeneID:12930116",]




.. raw:: html

    <dl class=dl-horizontal>
    	<dt>AGTCAA</dt>
    		<dd>15.9608160334502</dd>
    	<dt>AGTTCC</dt>
    		<dd>44.558749951627</dd>
    	<dt>ATGTCA</dt>
    		<dd>33.1137682278579</dd>
    	<dt>CCGTCC</dt>
    		<dd>55.6323113562913</dd>
    	<dt>GTCCGC</dt>
    		<dd>33.1625309587081</dd>
    	<dt>GTGAAA</dt>
    		<dd>31.5288839014904</dd>
    </dl>




Exercise: Get a summary (mean, median, quantiles etc ) of the size
factors

.. code:: python

    summary(sizeFactors(dds))




.. parsed-literal::

       Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
     0.8564  0.8955  1.0130  1.0190  1.1090  1.2340 



Before going to the next step, let's look at the dispersionFunction slot

.. code:: python

    dds@dispersionFunction




.. raw:: html

    <pre class=language-r><code>function () 
    NULL</code></pre>



Dispersion Parameters
---------------------

Next, we get the dispersion factors
:math:`\alpha_1,\ldots,\alpha_{4436}`

.. code:: python

    dds=estimateDispersions(dds)


.. parsed-literal::

    gene-wise dispersion estimates
    mean-dispersion relationship
    final dispersion estimates


Now inspect the dds object again and note that the rowRanges slot has
extra information ("metadata column names(0):" before versus "column
names(9): baseMean baseVar ... dispOutlier dispMAP")

.. code:: python

    dds




.. parsed-literal::

    class: DESeqDataSet 
    dim: 4436 6 
    exptData(0):
    assays(2): counts mu
    rownames(4436): GeneID:12930114 GeneID:12930115 ... GeneID:13406005 GeneID:13406006
    rowRanges metadata column names(9): baseMean baseVar ... dispOutlier dispMAP
    colnames(6): AGTCAA AGTTCC ... GTCCGC GTGAAA
    colData names(3): trt md5sum sizeFactor



We can extract the gene specific dispersion factors using dispersions().
Note that there will be one number per gene. We look at the first four
genes (rounded to 4 decimal places)

.. code:: python

    alphas=dispersions(dds)

Verify that the number of dispersion factors equals the number of genes

.. code:: python

    length(alphas)




.. raw:: html

    4436



Print the dispersion factors for the first 5 genes rounded to four
decimal points

.. code:: python

    round(alphas[1:5],4)




.. raw:: html

    <ol class=list-inline>
    	<li>0.0326</li>
    	<li>0.0865</li>
    	<li>0.1007</li>
    	<li>0.1917</li>
    	<li>0.0571</li>
    </ol>




Extract the metadata using mcols() for the first four genes (recall that
it was previously

.. code:: python

    mcols(dds)[1:4,]




.. parsed-literal::

    DataFrame with 4 rows and 9 columns
       baseMean     baseVar   allZero dispGeneEst    dispFit dispersion  dispIter dispOutlier
      <numeric>   <numeric> <logical>   <numeric>  <numeric>  <numeric> <numeric>   <logical>
    1 142.93983 1023.613795     FALSE  0.02039658 0.03791595 0.03261235         9       FALSE
    2  29.65661   52.647510     FALSE  0.03829112 0.10200717 0.08650694         7       FALSE
    3  35.65951  179.185117     FALSE  0.13809719 0.08839361 0.10069759         9       FALSE
    4  10.01145    7.636933     FALSE  0.00000001 0.26069544 0.19171019         6       FALSE
         dispMAP
       <numeric>
    1 0.03261235
    2 0.08650694
    3 0.10069759
    4 0.19171019



Exercise: Provide statistical summaries of the dispersion factors

.. code:: python

    summary(dispersions(dds))




.. parsed-literal::

        Min.  1st Qu.   Median     Mean  3rd Qu.     Max.     NA's 
     0.01212  0.02685  0.05387  0.45910  0.19760 10.00000      106 



Exercise: Summarize the dispersion factors using a box plot (may want to
log transform)

.. code:: python

    boxplot(log(dispersions(dds)))




Differential Expression Analysis
--------------------------------

We can now conduct a differential expression analysis using the DESeq()
function. Keep in mind that to get to this step, we first estimated the
size factors and then the dispersion parameters.

.. code:: python

    ddsDE=DESeq(dds)


.. parsed-literal::

    using pre-existing size factors
    estimating dispersions
    found already estimated dispersions, replacing these
    gene-wise dispersion estimates
    mean-dispersion relationship
    final dispersion estimates
    fitting model and testing


We can get the results for the differential expression analysis using
results()

.. code:: python

    myres=results(ddsDE)

Let's look at the results for the first four genes

.. code:: python

    myres[1:4,]




.. parsed-literal::

    log2 fold change (MAP): trt 1 vs 0 
    Wald test p-value: trt 1 vs 0 
    DataFrame with 4 rows and 6 columns
                     baseMean log2FoldChange     lfcSE        stat     pvalue      padj
                    <numeric>      <numeric> <numeric>   <numeric>  <numeric> <numeric>
    GeneID:12930114 142.93983     0.38754123 0.2283606  1.69705806 0.08968568 0.2322613
    GeneID:12930115  29.65661     0.01780841 0.3771759  0.04721511 0.96234178 0.9845476
    GeneID:12930116  35.65951     0.31723607 0.3883336  0.81691638 0.41397621 0.6333378
    GeneID:12930117  10.01145    -0.33211620 0.5315665 -0.62478765 0.53211044 0.7252468



Calculate BH adjusted P-values by "hand" using the p.adjust() function

.. code:: python

    BH=p.adjust(myres$pvalue,"BH")
    BH[1:4]




.. raw:: html

    <ol class=list-inline>
    	<li>0.267389341443891</li>
    	<li>0.986964599211916</li>
    	<li>0.68787617390386</li>
    	<li>0.766812944707763</li>
    </ol>




You can get the descriptions for the columns from the DE analysis

.. code:: python

    data.frame(desc=mcols(myres)$description)




.. raw:: html

    <table>
    <thead><tr><th></th><th scope=col>desc</th></tr></thead>
    <tbody>
    	<tr><th scope=row>1</th><td>mean of normalized counts for all samples</td></tr>
    	<tr><th scope=row>2</th><td>log2 fold change (MAP): trt 1 vs 0</td></tr>
    	<tr><th scope=row>3</th><td>standard error: trt 1 vs 0</td></tr>
    	<tr><th scope=row>4</th><td>Wald statistic: trt 1 vs 0</td></tr>
    	<tr><th scope=row>5</th><td>Wald test p-value: trt 1 vs 0</td></tr>
    	<tr><th scope=row>6</th><td>BH adjusted p-values</td></tr>
    </tbody>
    </table>




We can get summaries of the results:

.. code:: python

    summary(myres,0.05)


.. parsed-literal::

    
    out of 4330 with nonzero total read count
    adjusted p-value < 0.05
    LFC > 0 (up)     : 415, 9.6% 
    LFC < 0 (down)   : 446, 10% 
    outliers [1]     : 1, 0.023% 
    low counts [2]   : 649, 15% 
    (mean count < 5.1)
    [1] see 'cooksCutoff' argument of ?results
    [2] see 'independentFiltering' argument of ?results
    


You can sort the results by say the unadjusted P-values

.. code:: python

    myres[order(myres[["pvalue"]])[1:4],]





.. parsed-literal::

    log2 fold change (MAP): trt 1 vs 0 
    Wald test p-value: trt 1 vs 0 
    DataFrame with 4 rows and 6 columns
                     baseMean log2FoldChange     lfcSE      stat       pvalue         padj
                    <numeric>      <numeric> <numeric> <numeric>    <numeric>    <numeric>
    GeneID:12931678 3003.9529       3.860438 0.1874546  20.59399 3.107121e-94 1.143420e-90
    GeneID:12930177  753.7226      -2.637364 0.1670864 -15.78443 3.982238e-56 7.327317e-53
    GeneID:12931383  440.8970      -3.457843 0.2210372 -15.64372 3.666822e-55 4.497968e-52
    GeneID:12933669 5394.4990      -2.084425 0.1391204 -14.98289 9.499917e-51 8.739923e-48



To get the list of genes with unadjusted P-values < 0.00001 and absolute
log2 FC of more than 4

.. code:: python

    subset(myres,pvalue<0.00001&abs(log2FoldChange)>4)




.. parsed-literal::

    log2 fold change (MAP): trt 1 vs 0 
    Wald test p-value: trt 1 vs 0 
    DataFrame with 5 rows and 6 columns
                      baseMean log2FoldChange     lfcSE       stat       pvalue         padj
                     <numeric>      <numeric> <numeric>  <numeric>    <numeric>    <numeric>
    GeneID:12931377   77.54592      -4.702584 0.4144309 -11.347090 7.667210e-30 8.817292e-28
    GeneID:12932008   72.76239       4.100720 0.3704581  11.069324 1.767296e-28 1.970802e-26
    GeneID:12932226 1276.69035       4.443572 0.6376555   6.968610 3.200888e-12 8.413761e-11
    GeneID:12933119  238.56980       4.459221 0.3267031  13.649153 2.042379e-42 6.263295e-40
    GeneID:12934075  837.42714       4.343292 0.5294396   8.203564 2.333629e-16 9.649162e-15



To get the list of genes with unadjusted P-values < 0.00001 and
upregulated genes with log2 FC of more than 4

.. code:: python

    subset(myres,pvalue<0.00001&log2FoldChange>4)




.. parsed-literal::

    log2 fold change (MAP): trt 1 vs 0 
    Wald test p-value: trt 1 vs 0 
    DataFrame with 4 rows and 6 columns
                      baseMean log2FoldChange     lfcSE      stat       pvalue         padj
                     <numeric>      <numeric> <numeric> <numeric>    <numeric>    <numeric>
    GeneID:12932008   72.76239       4.100720 0.3704581 11.069324 1.767296e-28 1.970802e-26
    GeneID:12932226 1276.69035       4.443572 0.6376555  6.968610 3.200888e-12 8.413761e-11
    GeneID:12933119  238.56980       4.459221 0.3267031 13.649153 2.042379e-42 6.263295e-40
    GeneID:12934075  837.42714       4.343292 0.5294396  8.203564 2.333629e-16 9.649162e-15



The P-values for the four top genes are beyond machine precision. You
can use the format.pval() function to properly format the P-values.
PLEASE promote ending the practice of publishing P-values below machine
precision. (that would be akin to stating the weight of an object that
weighs less than one pound with scale that whose minimum weight spec is
1lbs).

.. code:: python

    myres$pval=format.pval(myres$pvalue)
    myres[order(myres[["pvalue"]])[1:4],]




.. parsed-literal::

    log2 fold change (MAP): trt 1 vs 0 
    Wald test p-value: trt 1 vs 0 
    DataFrame with 4 rows and 7 columns
                     baseMean log2FoldChange     lfcSE      stat       pvalue         padj        pval
                    <numeric>      <numeric> <numeric> <numeric>    <numeric>    <numeric> <character>
    GeneID:12931678 3003.9529       3.860438 0.1874546  20.59399 3.107121e-94 1.143420e-90  < 2.22e-16
    GeneID:12930177  753.7226      -2.637364 0.1670864 -15.78443 3.982238e-56 7.327317e-53  < 2.22e-16
    GeneID:12931383  440.8970      -3.457843 0.2210372 -15.64372 3.666822e-55 4.497968e-52  < 2.22e-16
    GeneID:12933669 5394.4990      -2.084425 0.1391204 -14.98289 9.499917e-51 8.739923e-48  < 2.22e-16



Let's look at a volcano plot

.. code:: python

    plot(myres$log2FoldChange,-log10(myres$padj),pch=19,cex=0.3,xlab="Log2 FC",ylab="-log10(BH Adjusted P-value)")




Extract results for genes GeneID:12932226 and GeneID:12930116

.. code:: python

    myres[c("GeneID:12932226","GeneID:12930116"),]




.. parsed-literal::

    log2 fold change (MAP): trt 1 vs 0 
    Wald test p-value: trt 1 vs 0 
    DataFrame with 2 rows and 6 columns
                      baseMean log2FoldChange     lfcSE      stat       pvalue         padj
                     <numeric>      <numeric> <numeric> <numeric>    <numeric>    <numeric>
    GeneID:12932226 1276.69035      4.4435720 0.6376555 6.9686095 3.200888e-12 8.413761e-11
    GeneID:12930116   35.65951      0.3172361 0.3883336 0.8169164 4.139762e-01 6.333378e-01



Exercise: Annotate the hits with adjusted P-values < 0.05 and absolute
log2 FC greater than 2 in red

.. code:: python

    plot(myres$log2FoldChange,-log10(myres$padj),pch=19,cex=0.3,xlab="Log2 FC",ylab="-log10(BH Adjusted P-value)",col=ifelse(myres$padj<0.05&abs(myres$log2FoldChange)>2,"red","black"))




Converting/Normalizing Counts to "Expressions"
----------------------------------------------

Normalized Counts
~~~~~~~~~~~~~~~~~

We have already shown how to "normalize" the counts using the estimated
size factors

.. code:: python

    head(counts(dds,normalize=TRUE),3)




.. raw:: html

    <table>
    <thead><tr><th></th><th scope=col>AGTCAA</th><th scope=col>AGTTCC</th><th scope=col>ATGTCA</th><th scope=col>CCGTCC</th><th scope=col>GTCCGC</th><th scope=col>GTGAAA</th></tr></thead>
    <tbody>
    	<tr><th scope=row>GeneID:12930114</th><td>125.5584</td><td>110.9918</td><td>133.3500</td><td>136.2424</td><td>148.3102</td><td>203.1861</td></tr>
    	<tr><th scope=row>GeneID:12930115</th><td>31.92163</td><td>34.02668</td><td>22.37417</td><td>20.43636</td><td>29.47781</td><td>39.70304</td></tr>
    	<tr><th scope=row>GeneID:12930116</th><td>15.96082</td><td>44.55875</td><td>33.11377</td><td>55.63231</td><td>33.16253</td><td>31.52888</td></tr>
    </tbody>
    </table>




Plot the counts stratified by treatment for the 2nd gene

.. code:: python

     plotCounts(dds, 2,intgroup="trt")




Or alternatively (better)

.. code:: python

     plotCounts(dds, "GeneID:12930115",intgroup="trt")




Now get this plot for the top hit

.. code:: python

    plotCounts(dds, "GeneID:12931678",intgroup="trt")




FPM
~~~

.. code:: python

    Another approach is to FPM: fragments per million mapped fragments

.. code:: python

    head(fpm(dds),3)




.. raw:: html

    <table>
    <thead><tr><th></th><th scope=col>AGTCAA</th><th scope=col>AGTTCC</th><th scope=col>ATGTCA</th><th scope=col>CCGTCC</th><th scope=col>GTCCGC</th><th scope=col>GTGAAA</th></tr></thead>
    <tbody>
    	<tr><th scope=row>GeneID:12930114</th><td>49.01406</td><td>43.32771</td><td>52.05567</td><td>53.18475</td><td>57.89565</td><td>79.31749</td></tr>
    	<tr><th scope=row>GeneID:12930115</th><td>12.461202</td><td>13.282948</td><td> 8.734172</td><td> 7.977713</td><td>11.507209</td><td>15.498819</td></tr>
    	<tr><th scope=row>GeneID:12930116</th><td> 6.230601</td><td>17.394336</td><td>12.926575</td><td>21.717107</td><td>12.945610</td><td>12.307886</td></tr>
    </tbody>
    </table>




Let's calculate the FPM manually. For gene :math:`i` sample :math:`j`,
the FPM is defined as :math:`\frac{K_{ij}}{D_j}\times 10^{6}` where
:math:`D_j=\sum_{i=1} K_{ij}` is the read depth for sample :math:`j`.
First get the read depth for each sample

.. code:: python

    D=colSums(counts(dds))
    D




.. raw:: html

    <dl class=dl-horizontal>
    	<dt>AGTCAA</dt>
    		<dd>2324804</dd>
    	<dt>AGTTCC</dt>
    		<dd>3199231</dd>
    	<dt>ATGTCA</dt>
    		<dd>3032225</dd>
    	<dt>CCGTCC</dt>
    		<dd>2237181</dd>
    	<dt>GTCCGC</dt>
    		<dd>2662410</dd>
    	<dt>GTGAAA</dt>
    		<dd>2224981</dd>
    </dl>




By default, the fpm() function uses a robust approach. We will disable
this right now as to replicate the standard FPM. Let's look at gene 1

.. code:: python

    fpm1=fpm(dds,robust=FALSE)[1,]
    fpm1




.. raw:: html

    <dl class=dl-horizontal>
    	<dt>AGTCAA</dt>
    		<dd>50.7569670389418</dd>
    	<dt>AGTTCC</dt>
    		<dd>42.8227908519266</dd>
    	<dt>ATGTCA</dt>
    		<dd>49.1388336947291</dd>
    	<dt>CCGTCC</dt>
    		<dd>53.6389322097765</dd>
    	<dt>GTCCGC</dt>
    		<dd>60.4715276760529</dd>
    	<dt>GTGAAA</dt>
    		<dd>78.2029149911842</dd>
    </dl>




Now get the raw counts for gene 1

.. code:: python

    cnt1=counts(dds)[1,]
    cnt1




.. raw:: html

    <dl class=dl-horizontal>
    	<dt>AGTCAA</dt>
    		<dd>118</dd>
    	<dt>AGTTCC</dt>
    		<dd>137</dd>
    	<dt>ATGTCA</dt>
    		<dd>149</dd>
    	<dt>CCGTCC</dt>
    		<dd>120</dd>
    	<dt>GTCCGC</dt>
    		<dd>161</dd>
    	<dt>GTGAAA</dt>
    		<dd>174</dd>
    </dl>




Now calculate the FPM for gene 1

.. code:: python

    myfpm1=cnt1/D*1e6
    myfpm1




.. raw:: html

    <dl class=dl-horizontal>
    	<dt>AGTCAA</dt>
    		<dd>50.7569670389418</dd>
    	<dt>AGTTCC</dt>
    		<dd>42.8227908519266</dd>
    	<dt>ATGTCA</dt>
    		<dd>49.1388336947291</dd>
    	<dt>CCGTCC</dt>
    		<dd>53.6389322097765</dd>
    	<dt>GTCCGC</dt>
    		<dd>60.4715276760529</dd>
    	<dt>GTGAAA</dt>
    		<dd>78.2029149911842</dd>
    </dl>




This is how you check if two numeric columns are "equal"

.. code:: python

    min(abs(fpm1-myfpm1))




.. raw:: html

    0



FPKM
----

To calculate the FPKM (fragments per kilobase per million mapped
fragments) we need to add annotation to assign the feature lengths. More
specifically, for gene :math:`i` sample :math:`j`, the FPKM is defined
as :math:`\frac{K_{ij}}{\ell_i D_j}\times 10^3 \times 10^{6}` where
:math:`\ell_i` is the "length" of gene :math:`i` (fragments for each
:math:`10^3` bases in the gene for every :math:`\frac{D_j}{10^6}`
fragments. More on this later.

Regularized log transformation
------------------------------

The regularized log transform can be obtained using the rlog() function.
Note that an important argument for this function is blind (TRUE by
default). The default "blinds" the normalization to the design. This is
very important so as to not bias the analyses (e.g. class discovery

.. code:: python

    rld=rlog(dds,blind=TRUE)

Hierarchical clustering using rlog transformation

.. code:: python

    dists=dist(t(assay(rld)))
    plot(hclust(dists))





PC Analysis using the rlog transformation

.. code:: python

     plotPCA(rld,intgroup="trt")




.. code:: python

    sessionInfo()




.. parsed-literal::

    R version 3.2.1 (2015-06-18)
    Platform: x86_64-pc-linux-gnu (64-bit)
    Running under: Debian GNU/Linux 8 (jessie)
    
    locale:
     [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               LC_TIME=en_US.UTF-8       
     [4] LC_COLLATE=en_US.UTF-8     LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
     [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  LC_ADDRESS=C              
    [10] LC_TELEPHONE=C             LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       
    
    attached base packages:
     [1] tools     parallel  stats4    stats     graphics  grDevices utils     datasets  methods  
    [10] base     
    
    other attached packages:
     [1] MASS_7.3-40               knitr_1.10.5              DESeq2_1.8.1             
     [4] RcppArmadillo_0.5.200.1.0 Rcpp_0.11.6               GenomicRanges_1.20.5     
     [7] GenomeInfoDb_1.4.1        IRanges_2.2.5             S4Vectors_0.6.2          
    [10] BiocGenerics_0.14.0      
    
    loaded via a namespace (and not attached):
     [1] genefilter_1.50.0    locfit_1.5-9.1       repr_0.3             reshape2_1.4.1      
     [5] splines_3.2.1        lattice_0.20-31      colorspace_1.2-6     base64enc_0.1-3     
     [9] survival_2.38-2      XML_3.98-1.3         foreign_0.8-63       DBI_0.3.1           
    [13] BiocParallel_1.2.9   RColorBrewer_1.1-2   lambda.r_1.1.7       uuid_0.1-2          
    [17] plyr_1.8.3           stringr_1.0.0        munsell_0.4.2        gtable_0.1.2        
    [21] futile.logger_1.4.1  evaluate_0.7         latticeExtra_0.6-26  Biobase_2.28.0      
    [25] geneplotter_1.46.0   AnnotationDbi_1.30.1 rzmq_0.7.7           proto_0.3-10        
    [29] IRdisplay_0.3        acepack_1.3-3.3      xtable_1.7-4         scales_0.2.5        
    [33] IRkernel_0.4         Hmisc_3.16-0         jsonlite_0.9.16      annotate_1.46.1     
    [37] XVector_0.8.0        gridExtra_2.0.0      ggplot2_1.0.1        digest_0.6.8        
    [41] stringi_0.5-5        grid_3.2.1           magrittr_1.5         RSQLite_1.0.0       
    [45] Formula_1.2-1        cluster_2.0.1        futile.options_1.0.0 rpart_4.1-9         
    [49] nnet_7.3-9          



