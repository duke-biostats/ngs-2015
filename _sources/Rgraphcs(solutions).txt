
Making interesting plots in R
-----------------------------

In addition to the ``base`` plotting facilites we have been using, R
also has the ``lattice`` and ``ggplot2`` packages that can be used to
generate beutfiul graphs. We will only touch on a small subset of
``ggplot2`` capabiliites here.

**References**

-  `R Graphics Cookbook <http://www.cookbook-r.com/Graphs/>`__
-  `Lattice: Multivariate Data Visualization with
   R <http://www.springer.com/statistics/computational/book/978-0-387-75968-5>`__

.. code:: python

    options(warn=-1)

.. code:: python

    # from https://gist.github.com/stevenworthington/3178163
    ipak <- function(pkg){
        new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
        if (length(new.pkg)) 
            install.packages(new.pkg, dependencies = TRUE, repos = "http://cran.r-project.org")
        sapply(pkg, require, character.only = TRUE)
    }
     
    # usage
    packages <- c("ggplot2",  "gplots", "lattice", "plyr", "reshape2",
                  "RColorBrewer", "grid", "gridExtra", "igraph", "igraphdata")
    ipak(packages)




.. raw:: html

    <dl class=dl-horizontal>
    	<dt>ggplot2</dt>
    		<dd>TRUE</dd>
    	<dt>gplots</dt>
    		<dd>TRUE</dd>
    	<dt>lattice</dt>
    		<dd>TRUE</dd>
    	<dt>plyr</dt>
    		<dd>TRUE</dd>
    	<dt>reshape2</dt>
    		<dd>TRUE</dd>
    	<dt>RColorBrewer</dt>
    		<dd>TRUE</dd>
    	<dt>grid</dt>
    		<dd>TRUE</dd>
    	<dt>gridExtra</dt>
    		<dd>TRUE</dd>
    	<dt>igraph</dt>
    		<dd>TRUE</dd>
    	<dt>igraphdata</dt>
    		<dd>TRUE</dd>
    </dl>




.. code:: python

    library(ggplot2)
    library(grid)
    library(gridExtra)

Data set
~~~~~~~~

We will use about characteristics of different cars.

.. code:: python

    ?mtcars




.. raw:: html

    
    <table width="100%" summary="page for mtcars {datasets}"><tr><td>mtcars {datasets}</td><td align="right">R Documentation</td></tr></table>
    
    <h2>Motor Trend Car Road Tests</h2>
    
    <h3>Description</h3>
    
    <p>The data was extracted from the 1974 <EM>Motor Trend</EM> US magazine,
    and comprises fuel consumption and 10 aspects of
    automobile design and performance for 32 automobiles (1973&ndash;74
    models).
    </p>
    
    
    <h3>Usage</h3>
    
    <pre>mtcars</pre>
    
    
    <h3>Format</h3>
    
    <p>A data frame with 32 observations on 11 variables.
    </p>
    
    <table summary="Rd table">
    <tr>
     <td align="right">
        [, 1] </td><td align="left"> mpg  </td><td align="left"> Miles/(US) gallon </td>
    </tr>
    <tr>
     <td align="right">
        [, 2] </td><td align="left"> cyl  </td><td align="left"> Number of cylinders </td>
    </tr>
    <tr>
     <td align="right">
        [, 3] </td><td align="left"> disp </td><td align="left"> Displacement (cu.in.) </td>
    </tr>
    <tr>
     <td align="right">
        [, 4] </td><td align="left"> hp   </td><td align="left"> Gross horsepower </td>
    </tr>
    <tr>
     <td align="right">
        [, 5] </td><td align="left"> drat </td><td align="left"> Rear axle ratio </td>
    </tr>
    <tr>
     <td align="right">
        [, 6] </td><td align="left"> wt   </td><td align="left"> Weight (lb/1000) </td>
    </tr>
    <tr>
     <td align="right">
        [, 7] </td><td align="left"> qsec </td><td align="left"> 1/4 mile time </td>
    </tr>
    <tr>
     <td align="right">
        [, 8] </td><td align="left"> vs   </td><td align="left"> V/S </td>
    </tr>
    <tr>
     <td align="right">
        [, 9] </td><td align="left"> am   </td><td align="left"> Transmission (0 = automatic, 1 = manual) </td>
    </tr>
    <tr>
     <td align="right">
        [,10] </td><td align="left"> gear </td><td align="left"> Number of forward gears </td>
    </tr>
    <tr>
     <td align="right">
        [,11] </td><td align="left"> carb </td><td align="left"> Number of carburetors
      </td>
    </tr>
    
    </table>
    
    
    
    <h3>Source</h3>
    
    <p>Henderson and Velleman (1981),
    Building multiple regression models interactively.
    <EM>Biometrics</EM>, <B>37</B>, 391&ndash;411.
    </p>
    
    
    <h3>Examples</h3>
    
    <pre>
    require(graphics)
    pairs(mtcars, main = "mtcars data")
    coplot(mpg ~ disp | as.factor(cyl), data = mtcars,
           panel = panel.smooth, rows = 1)
    </pre>
    
    <hr><div align="center">[Package <em>datasets</em> version 3.1.2 ]</div>



.. code:: python

    head(mtcars)




.. raw:: html

    <table>
    <thead><tr><th></th><th scope=col>mpg</th><th scope=col>cyl</th><th scope=col>disp</th><th scope=col>hp</th><th scope=col>drat</th><th scope=col>wt</th><th scope=col>qsec</th><th scope=col>vs</th><th scope=col>am</th><th scope=col>gear</th><th scope=col>carb</th></tr></thead>
    <tbody>
    	<tr><th scope=row>Mazda RX4</th><td>21</td><td>6</td><td>160</td><td>110</td><td>3.9</td><td>2.62</td><td>16.46</td><td>0</td><td>1</td><td>4</td><td>4</td></tr>
    	<tr><th scope=row>Mazda RX4 Wag</th><td>21</td><td>6</td><td>160</td><td>110</td><td>3.9</td><td>2.875</td><td>17.02</td><td>0</td><td>1</td><td>4</td><td>4</td></tr>
    	<tr><th scope=row>Datsun 710</th><td>22.8</td><td>4</td><td>108</td><td>93</td><td>3.85</td><td>2.32</td><td>18.61</td><td>1</td><td>1</td><td>4</td><td>1</td></tr>
    	<tr><th scope=row>Hornet 4 Drive</th><td>21.4</td><td>6</td><td>258</td><td>110</td><td>3.08</td><td>3.215</td><td>19.44</td><td>1</td><td>0</td><td>3</td><td>1</td></tr>
    	<tr><th scope=row>Hornet Sportabout</th><td>18.7</td><td>8</td><td>360</td><td>175</td><td>3.15</td><td>3.44</td><td>17.02</td><td>0</td><td>0</td><td>3</td><td>2</td></tr>
    	<tr><th scope=row>Valiant</th><td>18.1</td><td>6</td><td>225</td><td>105</td><td>2.76</td><td>3.46</td><td>20.22</td><td>1</td><td>0</td><td>3</td><td>1</td></tr>
    </tbody>
    </table>




Basic plots
~~~~~~~~~~~

.. code:: python

    p1 <- ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point()
    p2 <- ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point() + geom_line()
    p3 <- ggplot(mtcars, aes(x=mpg)) + geom_histogram(binwidth=5)
    p4 <- ggplot(mtcars, aes(x=factor(gear), y=wt)) + geom_boxplot()
    p5 <- ggplot(data.frame(x=seq(0, 2*pi, length.out = 50)), aes(x=x)) + stat_function(fun=sin, geom="line")
    p6 <- ggplot(mtcars, aes(x=mpg, alpha=0.5, fill=factor(gear))) + geom_density() +
        guides(alpha=FALSE, fill=FALSE)
    grid.arrange(p1, p2, p3, p4, p5, p6, ncol = 2, main = "Basic plots")




Plot aesthetics
~~~~~~~~~~~~~~~

.. code:: python

    p <- ggplot(mtcars, aes(x=wt, y=mpg))
    p1 <- p + geom_point(aes(alpha=qsec))
    p2 <- p + geom_point(aes(color=factor(gear))) + xlab("Weight") + ylab("Miles per gallon")
    p3 <- p + geom_point(aes(size=hp, color=disp)) + ggtitle("Color and size")
    p4 <- p + geom_point(colour="black", size = 4.5, show_guide = TRUE) + 
              geom_point(colour="pink", size = 4, show_guide = TRUE) +
              geom_point(aes(shape = factor(cyl)))
    grid.arrange(p1, p2, p3, p4, ncol = 2, main = "Scatter plots with different aesthetics")




Adding fitted lines
~~~~~~~~~~~~~~~~~~~

.. code:: python

    p <- ggplot(mtcars, aes(x=wt, y=mpg))
    p1 <- p + geom_point() + stat_smooth(method=lm, se=FALSE)
    p2 <- p + geom_point() + stat_smooth(method=lm, level=0.95)
    p3 <- p + geom_point() + stat_smooth(method=loess, color='red')
    p4 <- ggplot(mtcars, aes(x=wt, y=mpg, color=factor(am))) + geom_point() + 
        geom_smooth(method='loess') + guides(color=FALSE)
    grid.arrange(p1, p2, p3, p4, ncol = 2, main = "Scatter plots with fitted lines")




Using existing model fits
^^^^^^^^^^^^^^^^^^^^^^^^^

.. code:: python

    m1 <- lm(mpg ~ wt, data=mtcars)
    pred1 <- data.frame(wt=seq(min(mtcars$wt), max(mtcars$wt), length.out=100))
    pred <- predict(m1, pred1, se.fit=TRUE)
    pred1$mpg <- pred$fit
    pred1$low <- pred1$mpg - 1.96*pred$se.fit
    pred1$high <- pred1$mpg + 1.96*pred$se.fit

.. code:: python

    m2 <- loess(mpg ~ wt, data=mtcars)
    pred2 <- data.frame(wt=seq(min(mtcars$wt), max(mtcars$wt), length.out=100))
    pred2$mpg <- predict(m2, pred2)

.. code:: python

    p <- ggplot(mtcars, aes(x=wt, y=mpg))
    p1 <- p + geom_point(size=4, color='gray40') + geom_line(data=pred1)
    p2 <- p + geom_point(size=4, color='gray40') + geom_line(data=pred1) +
        annotate("text", label="r^2 == 0.75", parse=TRUE, x=4.8, y=32)
    p3 <- p + geom_point(size=4, color='gray40') + geom_line(data=pred1) +
        geom_ribbon(data=pred1,aes(ymin=low,ymax=high),alpha=0.3) +
        annotate("text", label="r^2 == 0.75", parse=TRUE, x=4.8, y=32)
    p4 <- p + geom_point(size=4, color='blue', alpha=0.5) + geom_line(data=pred2, color='red', size=1)
    grid.arrange(p1, p2, p3, p4, ncol = 2, main = "Scatter plots with fitted lines from prior models")




Graphs
~~~~~~

It may be necessary to install first

.. code:: r

    install.packages("igraphdata", repos = "http://cran.r-project.org")

.. code:: python

    library(igraph)
    library(igraphdata)

.. code:: python

    data(macaque)

.. code:: python

    plot(macaque, layout=layout.auto, vertex.shape="circle",
         vertex.size=8, edge.arrow.size=0.5, vertex.label=NA)




Heatmap
~~~~~~~

.. code:: python

    heatmap(as.matrix(mtcars), Rowv = NA, Colv = NA, scale = "column")




Heatmap with dendrogram
~~~~~~~~~~~~~~~~~~~~~~~

.. code:: python

    heatmap(as.matrix(mtcars), scale = "column")




Fancy heatmaps
~~~~~~~~~~~~~~

Also see `d3heatmaps <https://github.com/rstudio/d3heatmap>`__ if you
want an interactive heatmap. This does not seem to work within the
notebook but will work in RStudio or an R script.

.. code:: python

    library(pheatmap)

.. code:: python

    pheatmap(as.matrix(mtcars), scale = "column")




.. code:: python

    library(gplots)

.. code:: python

    heatmap.2(as.matrix(mtcars), scale = "column", col=redgreen)




Plotting mulitple plots with condiitioning using ``lattice``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code:: python

    library(lattice)

.. code:: python

    splom(~mtcars[c(1, 3:7)] | factor(am), data=mtcars, groups=cyl, pscale=0, auto.key=TRUE,
         main="Cars grouped by cylinders for manual and automatic transmission")




Work!
-----

Reporduce plots doen by Kouros using ggplot2.

.. code:: python

    library(nlme)
    data(Rail)

.. code:: python

    head(Rail)




.. raw:: html

    <table>
    <thead><tr><th></th><th scope=col>Rail</th><th scope=col>travel</th></tr></thead>
    <tbody>
    	<tr><th scope=row>1</th><td>1</td><td>55</td></tr>
    	<tr><th scope=row>2</th><td>1</td><td>53</td></tr>
    	<tr><th scope=row>3</th><td>1</td><td>54</td></tr>
    	<tr><th scope=row>4</th><td>2</td><td>26</td></tr>
    	<tr><th scope=row>5</th><td>2</td><td>37</td></tr>
    	<tr><th scope=row>6</th><td>2</td><td>32</td></tr>
    </tbody>
    </table>




Exercise 1
^^^^^^^^^^

-  Use the ggplot function
-  Create a scatter plot with Rail on the x-axis and travel on the
   y-axis.
-  CHange the title to "I made this!"
-  Change the y-axis label to be "Zero-force travel time (nano-seconds)"
-  Change the size of the points to 5
-  Change the color of potins to blue and transparency to 0.5
-  Add a simple linear regression line to the plot with 90% confidence
   intervals


Exercise 2
^^^^^^^^^^

-  Use the ggplot function
-  Create a varaible ``x`` that contains 100 points drawn from a normal
   distribution with mean 10 and standerd deviation 2
-  Plot a density estimate in blue
-  Plot the true denstiy function in red
-  Add a rug showing locaiton of individual points in ``x`` (Google for
   this)
-  Add a normalized histogram with bin width = 1 (Hint: add
   aes(y=..density..) as an argument to geom\_histogram)
-  Remove the legend
-  Set the title to "100 points from the N(10,2) distribution"

.. code:: python

    x <- rnorm(mean=10, sd=2, n=100)
    xp <- seq(2, 18, length.out = 100)
    y <- dnorm(xp, mean=10, sd=2)
    ggplot(data.frame(x), aes(x=x, alpha=0.3)) + 
        geom_line(data=data.frame(x=x, y=y), aes(x=xp, y=y), col="red") +
        geom_rug() +
        geom_density(color="blue") +
        geom_histogram(binwidth=1, aes(y=..density..), alpha=0.3) +
        guides(alpha=FALSE)




